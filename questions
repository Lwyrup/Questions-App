#!/usr/bin/env ruby

#Class that deals with file and its modification
class Fileq

	#Sets up variable for array of questions
	def initFile
		@questions = []
		@listNum = 1
	end

	#Displays questions numbering by element number
	def see 
		@questions.each do |question|
			puts "#{@listNum}.#{question}"
			@listNum += 1
		end
	end
	
	#Opens the file line by line and calls on loadFile
	def getQuestions
		File.open("/Users/spencer/code/questions/questions.txt", "r") do |f|
				loadFile(f)
			f.close
		end	
	end

	#Takes current line and saves it as an item in the question array
	#
	# part - String line of text from .txt
	def loadFile(part)
		while line = part.gets
			@questions.push(line.split("\n").join())
		end
	end

	#Takes a number corresponding to display list number and deletes it
	#
	# listPos - Integer representing list position
	def removeQuestion(listPos)
		@questions -= [@questions[listPos.to_i - 1]]
	end
	
	# Pushes new questions to question array
	#
	# newQuestion - String to be added
	def addQuestion(newQuestion)
		@questions.push(newQuestion)
	end

	#Empties .txt and fills back up with the question array
	def saveFile
		File.open("/Users/spencer/code/questions/questions.txt", "w") do |f|
			f.puts @questions
			f.close
		end
	end
end

#Class that gets argument variables, analyzes them, and passes them to fileq class
class Commands

	#Sets up values and calls for the initialization of fileq class
	def initAndExe
		@argument = ARGV
		@questionList
		initQuestionClass
		argumentReader
	end

	#Initializes fileq class and calls fileq to set up questions
	def initQuestionClass
		@questionList = Fileq.new
		@questionList.initFile
		@questionList.getQuestions
	end

	#Reads the argument variable and decides what to do
	def argumentReader 
		if @argument[0].to_s == "" 
			show
		elsif @argument[0] == "add" and @argument[1].to_s != ""
			add(@argument[1])
		elsif @argument[0] == "rm" and @argument[1].to_i > 0
			rm(@argument[1])
		elsif @argument[0] == ("help")
			help
		else
			puts "error: (invalid argument)\nenter 'help' for a list of valid arguments"
		end
		
	end

	#Prints a help sheet
	def help 
		puts "Valid arguments for 'questions'\n------------------------------\n"
		puts "- add ('question')    => Adds a question with the questions in quotes after it.\n\n"
		puts "- rm (list number)    => Removes a questions from the list with that number.\n\n"
		puts "-                     => No argument will print the list."
	end

	#Calls fileq class to display questions
	def show
		@questionList.see
	end

	# Passes the question, from argv, to be added to the fileq class
	#
	# question - String of new question
	def add(question)
		@questionList.addQuestion(question)
		@questionList.see
		@questionList.saveFile
	end

	#Passes the postiton, from argv, to remove from the fileq class
	#
	# position - Integer
	def rm(position)
		@questionList.removeQuestion(position)
		@questionList.see
		@questionList.saveFile
	end
end

#Class that decides if argv is sufficient to run rest of code
class Gateway

	# Begins the gateway
	def run
		puts "\n"
		checkLegit_ness
		puts "\n"
	end

	# Verifies ARGV are legal
	def checkLegit_ness
		if ARGV.length > 2
			puts "error"
		else
			runCode
		end
	end
	
	# Runs the rest of the code
	def runCode
		commandArg = Commands.new 
		commandArg.initAndExe
	end
end

start = Gateway.new
start.run
